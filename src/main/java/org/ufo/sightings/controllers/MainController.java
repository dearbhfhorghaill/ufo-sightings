package org.ufo.sightings.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;
import org.ufo.sightings.entities.Sighting;
import org.ufo.sightings.repositories.SightingRepository;

import java.net.URI;
import java.security.Principal;
import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping(path="/ufo-sightings") // This means URLs start with /ufo-sightings (after Application path)
public class MainController {

    @Autowired // This means to get the bean called sightingRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SightingRepository sightingRepository;

    @PostMapping
    private ResponseEntity<Void> createSighting(@RequestBody Sighting newSightingRequest, UriComponentsBuilder ucb, Principal principal) {
        newSightingRequest.setAgent(principal.getName());
        Sighting savedSighting = sightingRepository.save(newSightingRequest);
        URI locationOfNewSighting = ucb
                .path("ufo-sightings/{id}")
                .buildAndExpand(savedSighting.getId())
                .toUri();
        return ResponseEntity.created(locationOfNewSighting).build();
    }

    @GetMapping("/{id}")
    private ResponseEntity<Sighting> findById(@PathVariable int id, Principal principal) {
        Sighting sighting = findSighting(id, principal);
        if (sighting != null) {
            return ResponseEntity.ok(sighting);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping
    private ResponseEntity<List<Sighting>> findAll(Pageable pageable, Principal principal) {
        Page<Sighting> page = sightingRepository.findByAgent(principal.getName(),
                PageRequest.of(
                        pageable.getPageNumber(),
                        pageable.getPageSize(),
                        pageable.getSortOr(Sort.by(Sort.Direction.ASC, "datePosted"))
                ));
        return ResponseEntity.ok(page.getContent());
    }

    @PutMapping("/{id}")
    private ResponseEntity<Void> putSighting(@PathVariable int id, @RequestBody Sighting sightingUpdate, Principal principal) {
        Sighting sighting = findSighting(id, principal);
        if (sighting != null) {
            sightingUpdate.setId(id);
            sightingUpdate.setAgent(principal.getName());
            sightingRepository.save(sightingUpdate);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }

    //TODO - decide if implementing hard or soft delete i.e. move data to archive, set some flag/deleted timestamp instead of actually removing record etc.
    @DeleteMapping("/{id}")
    private ResponseEntity<Void> deleteSighting(@PathVariable int id, Principal principal) {
        if (sightingRepository.existsByIdAndAgent(id, principal.getName())) {
            sightingRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }

    private Sighting findSighting(int id, Principal principal) {
        return sightingRepository.findByIdAndAgent(id, principal.getName());
    }
}
